{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amol\\\\HittingApis\\\\src\\\\App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  const dummyMovies = [{\n    id: 1,\n    title: 'Some Dummy Movie',\n    openingText: 'This is the opening text of the movie',\n    releaseDate: '2021-05-18'\n  }, {\n    id: 2,\n    title: 'Some Dummy Movie 2',\n    openingText: 'This is the second opening text of the movie',\n    releaseDate: '2021-05-19'\n  }];\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler_usingJSPromises = () => {\n    fetch('https://swapi.dev/api/films/').then(response => {\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          realeaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    });\n  };\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realeaseDate\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 46\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 58\n    }\n  }, \"Found no movies.\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 34\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 24\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Amol/HittingApis/src/App.js"],"names":["React","useEffect","useState","useCallback","MoviesList","AddMovie","App","dummyMovies","id","title","openingText","releaseDate","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler_usingJSPromises","fetch","then","response","json","data","transformedMovies","results","map","movieData","episode_id","opening_crawl","realeaseDate","release_date","fetchMoviesHandler","ok","Error","message","addMovieHandler","movie","console","log","method","body","JSON","stringify","headers","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,WAApC,QAAsD,OAAtD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,WAAW,GAAG,CAClB;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,kBAFT;AAGEC,IAAAA,WAAW,EAAE,uCAHf;AAIEC,IAAAA,WAAW,EAAE;AAJf,GADkB,EAOlB;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,oBAFT;AAGEC,IAAAA,WAAW,EAAE,8CAHf;AAIEC,IAAAA,WAAW,EAAE;AAJf,GAPkB,CAApB;AAeA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMgB,kCAAkC,GAAG,MAAM;AAC/CC,IAAAA,KAAK,CAAC,8BAAD,CAAL,CAAsCC,IAAtC,CAA2CC,QAAQ,IAAI;AACrD,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAFD,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACd,YAAMC,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,SAAS,IAAI;AACvD,eAAM;AACJnB,UAAAA,EAAE,EAAEmB,SAAS,CAACC,UADV;AAEJnB,UAAAA,KAAK,EAAEkB,SAAS,CAAClB,KAFb;AAGJC,UAAAA,WAAW,EAAEiB,SAAS,CAACE,aAHnB;AAIJC,UAAAA,YAAY,EAAEH,SAAS,CAACI;AAJpB,SAAN;AAMD,OAPyB,CAA1B;AAQAlB,MAAAA,SAAS,CAACW,iBAAD,CAAT;AACD,KAZD;AAaD,GAdD;;AAgBA,QAAMQ,kBAAkB,GAAG7B,WAAW,CAAE,YAAY;AAClDY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMF,KAAK,CAAC,8BAAD,CAA5B;;AACA,UAAG,CAACE,QAAQ,CAACY,EAAb,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,YAAMX,IAAI,GAAG,MAAMF,QAAQ,CAACC,IAAT,EAAnB;AACA,YAAME,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AAExD,eAAO;AACLnB,UAAAA,EAAE,EAAEmB,SAAS,CAACC,UADT;AAELnB,UAAAA,KAAK,EAAEkB,SAAS,CAAClB,KAFZ;AAGLC,UAAAA,WAAW,EAAEiB,SAAS,CAACE,aAHlB;AAILlB,UAAAA,WAAW,EAAEgB,SAAS,CAACG;AAJlB,SAAP;AAMD,OARyB,CAA1B;AASAjB,MAAAA,SAAS,CAACW,iBAAD,CAAT;AACD,KAhBD,CAgBE,OAAOR,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACmB,OAAP,CAAR;AACD;;AACDpB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvBqC,EAuBnC,EAvBmC,CAAtC;AA0BAd,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACA,kBAAD,CAFM,CAAT;;AAKA,iBAAeI,eAAf,CAA+BC,KAA/B,EAAsC;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMhB,QAAQ,GAAG,MAAMF,KAAK,CAAC,EAAD,EAAK;AAC/BqB,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAFyB;AAG/BO,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHsB,KAAL,CAA5B;AAQA,UAAMrB,IAAI,GAAG,MAAMF,QAAQ,CAACC,IAAT,EAAnB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACD;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAES,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,CAAClB,SAAD,IAAcF,MAAM,CAACiC,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEjC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADvC,EAEI,CAACE,SAAD,IAAcF,MAAM,CAACiC,MAAP,KAAkB,CAAhC,IAAqC,CAAC7B,KAAtC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFnD,EAGI,CAACF,SAAD,IAAcE,KAAd,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAH3B,EAIIF,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJjB,CAPF,CADF;AAgBD;;AAED,eAAeR,GAAf","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ];\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler_usingJSPromises = () => {\n    fetch('https://swapi.dev/api/films/').then(response => {\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map( movieData => {\n        return{\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          realeaseDate: movieData.release_date\n        }\n      })\n      setMovies(transformedMovies);\n    })\n  };\n\n  const fetchMoviesHandler = useCallback( async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if(!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map((movieData) => {\n  \n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realeaseDate\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  \n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n \n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return (\n    <React.Fragment>\n      {/* <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section> */}\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        { !isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        { !isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        { !isLoading && error && <p>{error}</p>}\n        { isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}