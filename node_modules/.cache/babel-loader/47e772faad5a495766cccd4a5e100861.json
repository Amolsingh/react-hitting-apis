{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amol\\\\HittingApis\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const dummyMovies = [{\n    id: 1,\n    title: 'Some Dummy Movie',\n    openingText: 'This is the opening text of the movie',\n    releaseDate: '2021-05-18'\n  }, {\n    id: 2,\n    title: 'Some Dummy Movie 2',\n    openingText: 'This is the second opening text of the movie',\n    releaseDate: '2021-05-19'\n  }];\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const fetchMoviesHandler_usingJSPromises = () => {\n    fetch('https://swapi.dev/api/films/').then(response => {\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          realeaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    });\n  };\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realeaseDate\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 46\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 58\n    }\n  }, \"Found no movies.\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 34\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 24\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Amol/HittingApis/src/App.js"],"names":["React","useEffect","useState","MoviesList","App","dummyMovies","id","title","openingText","releaseDate","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","fetchMoviesHandler_usingJSPromises","fetch","then","response","json","data","transformedMovies","results","map","movieData","episode_id","opening_crawl","realeaseDate","release_date","ok","Error","message","length"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ];\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const fetchMoviesHandler_usingJSPromises = () => {\n    fetch('https://swapi.dev/api/films/').then(response => {\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map( movieData => {\n        return{\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          realeaseDate: movieData.release_date\n        }\n      })\n      setMovies(transformedMovies);\n    })\n  };\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if(!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map((movieData) => {\n  \n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realeaseDate\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        { !isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        { !isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        { !isLoading && error && <p>{error}</p>}\n        { isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}